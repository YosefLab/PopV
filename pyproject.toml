[tool.isort]
include_trailing_comma = true
multi_line_output = 3
profile = "black"
skip_glob = ["popv/__init__.py"]

[tool.poetry]
name = "popv"
authors = ["Galen Xing", "Alexander Tarashansky <alexander.tarashansky@czbiohub.org>", "Can Ergen <canergen.ac@gmail.com>"]
license = "BSD-3-Clause"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]

description = "Automatic annotation of single cell data using a labelled reference dataset including various methods and giving certainty across those methods."
packages = [
  {include = "popv"},
]
version = "0.3.2"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
anndata = "^0.8"
bbknn = "^1.5.1"
black = {version = ">=22.3", optional = true}
celltypist = "^1.3.0"
flake8 = {version = ">=3.7.7", optional = true}
gdown = "^4.6.0"
grpcio = "^1.51.1"
h5py = "^3.7.0"
huggingface-hub = "0.11.1"
imgkit = "1.2.2"
importlib-metadata = "4.2.0"
ipython = {version = ">=7.20", optional = true, python = ">=3.7"}
ipywidgets = "*"
isort = {version = ">=5.7", optional = true}
jupyter = {version = ">=1.0", optional = true}
Markdown = "3.3.4"
nbconvert = {version = ">=5.4.0", optional = true}
nbformat = {version = ">=4.4.0", optional = true}
nbsphinx = {version = "*", optional = true}
nbsphinx-link = {version = "*", optional = true}
onclass = "^1.2"
pandas = ">=1.4,<2.0"
pre-commit = {version = ">=2.7.1", optional = true}
pytest = {version = ">=4.4", optional = true}
rich = ">=9.1.0"
scanorama = "^1.7.3"
scanpy = "^1.9.1"
scikit-learn = ">0.21.2,<1.0"
scikit-misc = ">=0.1"
scvi-tools = ">=0.20.0"
six = "1.15.0"
tensorflow = "^2.11.0"
tqdm = "4.64.0"
transformers = "^4.25.1"
typing-extensions = "4.2.0"
obonet = "^1.0"
jaxlib = "0.4.10"
jax = "0.4.10"
harmony-pytorch = "^0.1.7"

[tool.poetry.extras]
dev = ["black", "pytest", "pytest-cov", "flake8", "loompy", "jupyter", "nbformat", "nbconvert", "pre-commit", "isort"]

[tool.poetry.dev-dependencies]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37

[testenv]
deps = pytest
extras =
    dev
commands = pytest {posargs}
"""
[build-system]
build-backend = "poetry.masonry.api"
requires = [
  "poetry>=1.0",
  "setuptools", # keep it here or "pip install -e" would fail
]

[tool.hatch.build.targets.wheel]
packages = ['popv']

[tool.coverage.run]
source = ["popv"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true


[tool.black]
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.ruff]
src = ["."]
line-length = 119
target-version = "py38"
lint.select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF",  # Ruff formatting
    "TCH", # flake8-type-checking
    "FA", # flake8-future-annotations (FA)
    "TD", # TODO
    "UP",  # pyupgrade
    "RUF",  # Report unused noqa directives
    "PT", # pytest style
]
lint.ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We don't want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
    # Missing argument description in the docstring TODO: enable
    "D417",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["I", "BLE001"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]
"popv/__init__.py" = ["I"]

[tool.jupytext]
formats = "ipynb,md"
