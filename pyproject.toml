[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "PopV"
version = "0.4.2"
description = "Consensus prediction of cell type labels with popV"
readme = "README.md"
requires-python = ">=3.9, <3.12"
license = {file = "LICENSE"}
authors = [
    {name = "Can Ergen"},
]
maintainers = [
    {name = "Can Ergen", email = "canergen.ac@gmail.com"},
]
urls.Documentation = "https://PopV.readthedocs.io/"
urls.Source = "https://github.com/YosefLab/PopV.git"
urls.Home-page = "https://github.com/YosefLab/PopV.git"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dependencies = [
    "anndata>0.8.0",
    "pandas<2.0.0,>=1.4.0",
    "bbknn>1.5.0",
    "celltypist>1.3.0",
    "gdown>4.6.0",
    "h5py>3.7.0",
    "huggingface-hub>=0.11.1",
    "louvain",
    "onclass>=1.3",
    "scanorama>1.7.2",
    "scanpy>1.9.0",
    "scikit-learn>0.21.2,<1.2",
    "scikit-misc>=0.1",
    "scvi-tools>1.0.0",
    "tensorflow>2.11.0",
    "transformers>4.25.0",
    "obonet>=1.0",
    "harmony-pytorch>0.1.6",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "twine>=4.0.2"
]
cuml = [
    "faiss-gpu",
    "cudf-cu12",
    "cuml-cu12",
    "cugraph-cu12"
]
doc = [
    "docutils>=0.8,!=0.18.*,!=0.19.*",
    "sphinx>=4",
    "sphinx-book-theme>=1.0.0",
    "myst-nb",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-autodoc-typehints",
    "sphinxext-opengraph",
    # For notebooks
    "ipykernel",
    "ipython",
    "sphinx-copybutton",
    "pandas",
]
test = [
    "pytest",
    "coverage",
]

[tool.hatch.build.targets.wheel]
packages = ['popv']

[tool.coverage.run]
source = ["popv"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true

[tool.ruff]
src = ["."]
line-length = 120
indent-width = 4
target-version = "py39"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
]
ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"docs/*" = ["I", "BLE001"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]
"popv/__init__.py" = ["I"]

[tool.jupytext]
formats = "ipynb,md"
